package xyz.utools.web3j.contracts;

import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.io.IOException;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.5.
 */
@SuppressWarnings("rawtypes")
public class UserContract extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_ADDACCEPTTASK = "addAcceptTask";

    public static final String FUNC_ADDPOSTTASK = "addPostTask";

    public static final String FUNC_CHECKADDR = "checkAddr";

    public static final String FUNC_GETACCEPTTASK = "getAcceptTask";

    public static final String FUNC_GETMANAGERADDR = "getManagerAddr";

    public static final String FUNC_GETPOSTTASKLIST = "getPostTaskList";

    public static final String FUNC_GETREPUTATIONAVG = "getReputationAvg";

    public static final String FUNC_GETUSERADDR = "getUserAddr";

    public static final String FUNC_GETUSERINFORMATION = "getUserInformation";

    public static final String FUNC_GETUSERREPUTATION = "getUserReputation";

    public static final String FUNC_ISREGISTER = "isRegister";

    public static final String FUNC_LOGIN = "login";

    public static final String FUNC_REGISTER = "register";

    public static final String FUNC_UPDATEFINISHTASKNUM = "updateFinishTaskNum";

    public static final String FUNC_UPDATEPASSWORD = "updatePassword";

    public static final String FUNC_UPDATEPROFILE = "updateProfile";

    public static final String FUNC_UPDATEUSERREPUTATION = "updateUserReputation";

    @Deprecated
    protected UserContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected UserContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected UserContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected UserContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> addAcceptTask(String username, BigInteger taskId) {
        final Function function = new Function(
                FUNC_ADDACCEPTTASK, 
                Arrays.<Type>asList(new Utf8String(username),
                new Uint256(taskId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addPostTask(String username, BigInteger taskId) {
        final Function function = new Function(
                FUNC_ADDPOSTTASK, 
                Arrays.<Type>asList(new Utf8String(username),
                new Uint256(taskId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> checkAddr(String username, String addr) {
        final Function function = new Function(
                FUNC_CHECKADDR, 
                Arrays.<Type>asList(new Utf8String(username),
                new Address(160, addr)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<DynamicArray<Uint256>> getAcceptTask(String username) {
        final Function function = new Function(
                FUNC_GETACCEPTTASK, 
                Arrays.<Type>asList(new Utf8String(username)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {})
        );
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getManagerAddr() {
        final Function function = new Function(
                FUNC_GETMANAGERADDR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<DynamicArray<Uint256>> getPostTaskList(String username) {
        final Function function = new Function(
                FUNC_GETPOSTTASKLIST, 
                Arrays.<Type>asList(new Utf8String(username)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getReputationAvg() {
        final Function function = new Function(
                FUNC_GETREPUTATIONAVG, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getUserAddr(String username) {
        final Function function = new Function(
                FUNC_GETUSERADDR, 
                Arrays.<Type>asList(new Utf8String(username)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List<Type>> getUserInformation(String username) {
        final Function function = new Function(
                FUNC_GETUSERINFORMATION, 
                Arrays.<Type>asList(new Utf8String(username)),
                Arrays.<TypeReference<?>>asList(
                        new TypeReference<Address>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {},
                        new TypeReference<Uint256>() {}
                ));
        return executeRemoteCallMultipleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getUserReputation(String username) {
        final Function function = new Function(
                FUNC_GETUSERREPUTATION, 
                Arrays.<Type>asList(new Utf8String(username)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool>  isRegister(String addr, String username) throws IOException {
        final Function function = new Function(
                FUNC_ISREGISTER, 
                Arrays.<Type>asList(new Address(160, addr),
                new Utf8String(username)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> login(String username, String password) throws IOException {
        final Function function = new Function(
                FUNC_LOGIN, 
                Arrays.<Type>asList(new Utf8String(username),
                new Utf8String(password)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> register(String addr, String username, String password, String profile) {
        final Function function = new Function(
                FUNC_REGISTER, 
                Arrays.<Type>asList(new Address(160, addr),
                new Utf8String(username),
                new Utf8String(password),
                new Utf8String(profile)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateFinishTaskNum(String username) {
        final Function function = new Function(
                FUNC_UPDATEFINISHTASKNUM, 
                Arrays.<Type>asList(new Utf8String(username)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updatePassword(String username, String newPassword) {
        final Function function = new Function(
                FUNC_UPDATEPASSWORD, 
                Arrays.<Type>asList(new Utf8String(username),
                new Utf8String(newPassword)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateProfile(String username, String newProfile) {
        final Function function = new Function(
                FUNC_UPDATEPROFILE, 
                Arrays.<Type>asList(new Utf8String(username),
                new Utf8String(newProfile)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateUserReputation(String username, BigInteger newReputation) {
        final Function function = new Function(
                FUNC_UPDATEUSERREPUTATION, 
                Arrays.<Type>asList(new Utf8String(username),
                new Uint256(newReputation)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static UserContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new UserContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static UserContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new UserContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static UserContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new UserContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static UserContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new UserContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<UserContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(UserContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    public static RemoteCall<UserContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(UserContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<UserContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(UserContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<UserContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(UserContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }
}
