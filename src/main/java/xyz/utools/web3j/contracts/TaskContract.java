package xyz.utools.web3j.contracts;

import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.5.
 */
@SuppressWarnings("rawtypes")
public class TaskContract extends Contract {
    private static final String BINARY = "";

    public static final String FUNC_ACCEPTTASK = "acceptTask";

    public static final String FUNC_CHECKACCEPTCONDITION = "checkAcceptCondition";

    public static final String FUNC_CHECKSUBMITCONDITION = "checkSubmitCondition";

    public static final String FUNC_EVALUATESOLUTION = "evaluateSolution";

    public static final String FUNC_GETALLTASKID = "getAllTaskId";

    public static final String FUNC_GETALLTASKSOLUTIONLIST = "getAllTaskSolutionList";

    public static final String FUNC_GETSOLUTIONINFO = "getSolutionInfo";

    public static final String FUNC_GETSOLUTIONLENGTH = "getSolutionLength";

    public static final String FUNC_GETTASKCREATEDATE = "getTaskCreateDate";

    public static final String FUNC_GETTASKINFORMATION = "getTaskInformation";

    public static final String FUNC_POSTTASK = "postTask";

    public static final String FUNC_RETURNBALANCE = "returnBalance";

    public static final String FUNC_SUBMITSOLUTION = "submitSolution";

    @Deprecated
    protected TaskContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected TaskContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected TaskContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected TaskContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> acceptTask(String workerName, BigInteger taskId, BigInteger deposit) {
        final Function function = new Function(
                FUNC_ACCEPTTASK,
                Arrays.<Type>asList(new Utf8String(workerName),
                        new Uint256(taskId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, deposit);
    }

    public RemoteFunctionCall<Utf8String> checkAcceptCondition(String workerName, BigInteger taskId) {
        final Function function = new Function(
                FUNC_CHECKACCEPTCONDITION, 
                Arrays.<Type>asList(new Utf8String(workerName),
                new Uint256(taskId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> checkSubmitCondition(String workerName, BigInteger taskId) {
        final Function function = new Function(
                FUNC_CHECKSUBMITCONDITION,
                Arrays.<Type>asList(new Utf8String(workerName),
                        new Uint256(taskId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>(){} )
        );
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> evaluateSolution(BigInteger taskId, BigInteger solutionId, BigInteger level) {
        final Function function = new Function(
                FUNC_EVALUATESOLUTION, 
                Arrays.<Type>asList(new Uint256(taskId),
                new Uint256(solutionId),
                new Uint256(level)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<DynamicArray<Uint256>> getAllTaskId() {
        final Function function = new Function(
                FUNC_GETALLTASKID,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {})
        );
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<DynamicArray<Uint256>> getAllTaskSolutionList(BigInteger taskId) {
        final Function function = new Function(
                FUNC_GETALLTASKSOLUTIONLIST, 
                Arrays.<Type>asList(new Uint256(taskId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {})
        );
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<List<Type>> getSolutionInfo(BigInteger solutionId) {
        final Function function = new Function(
                FUNC_GETSOLUTIONINFO,
                Arrays.<Type>asList(new Uint256(solutionId)),
                Arrays.<TypeReference<?>>asList(
                        new TypeReference<Utf8String>() {},
                        new TypeReference<Utf8String>() {},
                        new TypeReference<Utf8String>() {},
                        new TypeReference<Uint256>() {},
                        new TypeReference<Uint256>() {},
                        new TypeReference<Uint256>() {}
                ));
        return executeRemoteCallMultipleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getSolutionLength(BigInteger taskId) {
        final Function function = new Function(
                FUNC_GETSOLUTIONLENGTH, 
                Arrays.<Type>asList(new Uint256(taskId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> getTaskCreateDate(BigInteger taskId) {
        final Function function = new Function(
                FUNC_GETTASKCREATEDATE,
                Arrays.<Type>asList(new Uint256(taskId)),
                Arrays.<TypeReference<?>>asList(
                        new TypeReference<Uint256>() {}
                ));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<List<Type>> getTaskInformation(BigInteger taskId) {
        final Function function = new Function(
                FUNC_GETTASKINFORMATION,
                Arrays.<Type>asList(new Uint256(taskId)),
                Arrays.<TypeReference<?>>asList(
                        new TypeReference<Utf8String>() {},
                        new TypeReference<Utf8String>() {},
                        new TypeReference<Uint256>() {},
                        new TypeReference<Uint256>() {},
                        new TypeReference<Uint256>() {},
                        new TypeReference<Uint256>() {},
                        new TypeReference<Uint256>() {},
                        new TypeReference<Uint256>() {},
                        new TypeReference<Uint256>() {},
                        new TypeReference<Uint256>() {},
                        new TypeReference<Utf8String>() {}
                ));
        return executeRemoteCallMultipleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> postTask(String title, String posterName, String description, BigInteger deposit, BigInteger deadline, BigInteger maxWorkerNum, BigInteger minReputation, BigInteger taskType, String pointer, BigInteger reward) {
        final Function function = new Function(
                FUNC_POSTTASK,
                Arrays.<Type>asList(new Utf8String(title),
                        new Utf8String(posterName),
                        new Utf8String(description),
                        new Uint256(deposit),
                        new Uint256(deadline),
                        new Uint256(maxWorkerNum),
                        new Uint256(minReputation),
                        new Uint256(taskType),
                        new Utf8String(pointer)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, reward);
    }

    public RemoteFunctionCall<TransactionReceipt> returnBalance(BigInteger taskId) {
        final Function function = new Function(
                FUNC_RETURNBALANCE, 
                Arrays.<Type>asList(new Uint256(taskId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> submitSolution(String workerName, String solution, String pointer, BigInteger taskId) {
        final Function function = new Function(
                FUNC_SUBMITSOLUTION, 
                Arrays.<Type>asList(new Utf8String(workerName),
                new Utf8String(solution),
                new Utf8String(pointer),
                new Uint256(taskId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static TaskContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new TaskContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static TaskContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new TaskContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static TaskContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new TaskContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static TaskContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new TaskContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<TaskContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String regAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, regAddr)));
        return deployRemoteCall(TaskContract.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<TaskContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String regAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, regAddr)));
        return deployRemoteCall(TaskContract.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TaskContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String regAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, regAddr)));
        return deployRemoteCall(TaskContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<TaskContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String regAddr) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(160, regAddr)));
        return deployRemoteCall(TaskContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }
}
